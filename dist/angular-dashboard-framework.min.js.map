{"version":3,"sources":["adf.js","adf.locale.constants.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","angular-dashboard-framework.min.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE","directive","$log","$compile","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","$modal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","unshift","transclude","name","collapsible","editable","maximizable","adfWidgetFilter","locale","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","translate","activeLocale","setLocale","toggleEditMode","modelCopy","$broadcast","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","$new","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","enableconfirmdelete","provider","adfLocale","getLocales","locales","getActiveLocale","label","translation","this","Error","addLocale","translations","isString","isObject","customWidgetTemplatePath","templatePath","widgetsPath","messageTemplate","loadingTemplate","extend","reload","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","then","response","put","data","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","key","invoke","all","locals","templateCtrl","controllerAs","children","contents","reason","msg","$on","preLink","definition","fromJson","widgetState","isCollapsed","debug","postLink","deleteWidget","remove","deleteScope","adfDeleteTemplatePath","deleteTemplateUrl","deleteDialog","editScope","saveDialog","event","args","openFullScreen","fullScreenScope","fullscreenTemplateUrl","size","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n'use strict';\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale', [])\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n\t\t\tif (!targetColumn.widgets) {\r\n\t\t\t\ttargetColumn.widgets = [];\r\n\t\t\t}\r\n\t\t\t\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     */\n    function addNewWidgetToModel(model, widget){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n          locale: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n          $scope.translate = dashboard.translate;\n          var activeLocale = dashboard.activeLocale();\n          if (activeLocale) {\n              dashboard.setLocale(activeLocale);\n          }\n\n          $scope.$watch('locale', function(oldVal, newVal) {\n              var activeLocale = dashboard.activeLocale();\n              if (newVal && newVal !== activeLocale) {\n                  dashboard.setLocale(newVal);\n              }\n          }, true);\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.collapseAll = function(collapseExpandStatus){\n            $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n            var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n            if(model.editTemplateUrl) {\n                adfEditTemplatePath = model.editTemplateUrl;\n            }\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n            //pass translate function to the new scope so we can translate the labels inside the modal dialog\n            addScope.translate = $scope.translate;\n\n            var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n            if(model.addTemplateUrl) {\n                adfAddTemplatePath = model.addTemplateUrl;\n            }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w);\n            $rootScope.$broadcast('adfWidgetAdded', name, model, w);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n      var activeLocale = adfLocale.defaultLocale;\n      var locales = adfLocale.frameworkLocales;\n\n      function getLocales() {\n          return locales;\n      }\n\n      function getActiveLocale() {\n          return activeLocale;\n      }\n\n      function translate(label) {\n          var translation = locales[activeLocale][label];\n          return translation ? translation : label;\n      }\n\n      this.setLocale = function(locale){\n          if(locales[locale]) {\n              activeLocale = locale;\n          } else {\n              throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n          }\n\n          return this;\n      };\n      this.addLocale = function(locale, translations){\n          if(!angular.isString(locale)) {\n              throw new Error('locale must be an string');\n          }\n\n          if(!angular.isObject(translations)) {\n              throw new Error('translations must be an object');\n          }\n\n          locales[locale] = translations;\n          return this;\n      };\n\n      var customWidgetTemplatePath = null;\n\n      /**\n       * @ngdoc method\n       * @name adf.dashboardProvider#customWidgetTemplatePath\n       * @propertyOf adf.dashboardProvider\n       * @description\n       *\n       * Changes the container template for the widgets\n       *\n       * @param {string} path to the custom widget template\n       *\n       * @returns {Object} self\n       */\n      this.customWidgetTemplatePath = function(templatePath) {\n          customWidgetTemplatePath = templatePath;\n          return this;\n      };\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n          setLocale: this.setLocale,\n          locales: getLocales,\n          activeLocale: getActiveLocale,\n          translate: translate,\n          customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          //$http.get(url)\r\n          //  .success(function(response){\r\n          //    // put response to cache, with unmodified url as key\r\n          //    $templateCache.put(widget.templateUrl, response);\r\n          //    deferred.resolve(response);\r\n          //  })\r\n          //  .error(function(){\r\n          //    deferred.reject('could not load template');\r\n          //  });\r\n\r\n            //jwu: above code not working\r\n            $http.get(url).then(function(response){\r\n                // put response to cache, with unmodified url as key\r\n                $templateCache.put(widget.templateUrl, response.data);\r\n                deferred.resolve(response.data);\r\n            }, (function(){\r\n                deferred.reject('could not load template');\r\n            }));\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.10.2');\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale', [])\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n\t\t\tif (!targetColumn.widgets) {\r\n\t\t\t\ttargetColumn.widgets = [];\r\n\t\t\t}\r\n\t\t\t\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$modal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     */\n    function addNewWidgetToModel(model, widget){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n          locale: '='\n      },\n      controller: [\"$scope\", function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n          $scope.translate = dashboard.translate;\n          var activeLocale = dashboard.activeLocale();\n          if (activeLocale) {\n              dashboard.setLocale(activeLocale);\n          }\n\n          $scope.$watch('locale', function(oldVal, newVal) {\n              var activeLocale = dashboard.activeLocale();\n              if (newVal && newVal !== activeLocale) {\n                  dashboard.setLocale(newVal);\n              }\n          }, true);\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.collapseAll = function(collapseExpandStatus){\n            $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n            var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n            if(model.editTemplateUrl) {\n                adfEditTemplatePath = model.editTemplateUrl;\n            }\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n            //pass translate function to the new scope so we can translate the labels inside the modal dialog\n            addScope.translate = $scope.translate;\n\n            var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n            if(model.addTemplateUrl) {\n                adfAddTemplatePath = model.addTemplateUrl;\n            }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w);\n            $rootScope.$broadcast('adfWidgetAdded', name, model, w);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      }],\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\n\n      var activeLocale = adfLocale.defaultLocale;\n      var locales = adfLocale.frameworkLocales;\n\n      function getLocales() {\n          return locales;\n      }\n\n      function getActiveLocale() {\n          return activeLocale;\n      }\n\n      function translate(label) {\n          var translation = locales[activeLocale][label];\n          return translation ? translation : label;\n      }\n\n      this.setLocale = function(locale){\n          if(locales[locale]) {\n              activeLocale = locale;\n          } else {\n              throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n          }\n\n          return this;\n      };\n      this.addLocale = function(locale, translations){\n          if(!angular.isString(locale)) {\n              throw new Error('locale must be an string');\n          }\n\n          if(!angular.isObject(translations)) {\n              throw new Error('translations must be an object');\n          }\n\n          locales[locale] = translations;\n          return this;\n      };\n\n      var customWidgetTemplatePath = null;\n\n      /**\n       * @ngdoc method\n       * @name adf.dashboardProvider#customWidgetTemplatePath\n       * @propertyOf adf.dashboardProvider\n       * @description\n       *\n       * Changes the container template for the widgets\n       *\n       * @param {string} path to the custom widget template\n       *\n       * @returns {Object} self\n       */\n      this.customWidgetTemplatePath = function(templatePath) {\n          customWidgetTemplatePath = templatePath;\n          return this;\n      };\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n          setLocale: this.setLocale,\n          locales: getLocales,\n          activeLocale: getActiveLocale,\n          translate: translate,\n          customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  }]);\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"$sce\", \"$http\", \"$templateCache\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          //$http.get(url)\r\n          //  .success(function(response){\r\n          //    // put response to cache, with unmodified url as key\r\n          //    $templateCache.put(widget.templateUrl, response);\r\n          //    deferred.resolve(response);\r\n          //  })\r\n          //  .error(function(){\r\n          //    deferred.reject('could not load template');\r\n          //  });\r\n\r\n            //jwu: above code not working\r\n            $http.get(url).then(function(response){\r\n                // put response to cache, with unmodified url as key\r\n                $templateCache.put(widget.templateUrl, response.data);\r\n                deferred.resolve(response.data);\r\n            }, (function(){\r\n                deferred.reject('could not load template');\r\n            }));\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"$log\", \"$modal\", \"dashboard\", \"adfTemplatePath\", function($log, $modal, dashboard, adfTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n\n        //passs translate function from dashboard so we can translate labels inside html templates\n        $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n      var deleteWidget = function(){\n        var column = $scope.col;\n        if (column) {\n          var index = column.widgets.indexOf(definition);\n          if (index >= 0) {\n            column.widgets.splice(index, 1);\n          }\n        }\n        $element.remove();\n      };\n        $scope.remove = function() {\n          if($scope.options.enableConfirmDelete){\n              var deleteScope= $scope.$new();\n              deleteScope.translate = dashboard.translate;\n\n              var adfDeleteTemplatePath = adfTemplatePath + 'widget-delete.html';\n              if (definition.deleteTemplateUrl) {\n                  adfDeleteTemplatePath = definition.deleteTemplateUrl;\n              }\n              var opts = {\n                scope: deleteScope,\n                templateUrl: adfDeleteTemplatePath,\n                backdrop: 'static'\n              };\n              var instance = $modal.open(opts);\n\n              deleteScope.closeDialog = function() {\n                instance.close();\n                deleteScope.$destroy();\n              };\n              deleteScope.deleteDialog = function() {\n                deleteWidget();\n                deleteScope.closeDialog();\n              };\n          }\n          else {\n              deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n            editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n            var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n            if (definition.editTemplateUrl) {\n                adfEditTemplatePath = definition.editTemplateUrl;\n            }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n          editScope.saveDialog = function() {\n            definition.title = editScope.definition.title;\n            angular.extend(definition.config,editScope.definition.config);\n            editScope.closeDialog();\n         };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: [\"$scope\", function ($scope) {\n\n        $scope.$on(\"adfDashboardCollapseExapand\",function(event,args){\n           $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n         });\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n            fullScreenScope.translate = dashboard.translate;\n\n            var fullscreenTemplateUrl = adfTemplatePath + 'widget-fullscreen.html';\n            if (definition.deleteTemplateUrl) {\n                fullscreenTemplateUrl = definition.deleteTemplateUrl;\n            }\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: fullscreenTemplateUrl,\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $modal.open(opts);\n          fullScreenScope.closeDialog = function () {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      }],\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  }]);\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode locale=locale> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog() ng-bind=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button>  <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>Apply</button> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div class=panel-body collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);})(window);","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n\n        //passs translate function from dashboard so we can translate labels inside html templates\n        $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n      var deleteWidget = function(){\n        var column = $scope.col;\n        if (column) {\n          var index = column.widgets.indexOf(definition);\n          if (index >= 0) {\n            column.widgets.splice(index, 1);\n          }\n        }\n        $element.remove();\n      };\n        $scope.remove = function() {\n          if($scope.options.enableConfirmDelete){\n              var deleteScope= $scope.$new();\n              deleteScope.translate = dashboard.translate;\n\n              var adfDeleteTemplatePath = adfTemplatePath + 'widget-delete.html';\n              if (definition.deleteTemplateUrl) {\n                  adfDeleteTemplatePath = definition.deleteTemplateUrl;\n              }\n              var opts = {\n                scope: deleteScope,\n                templateUrl: adfDeleteTemplatePath,\n                backdrop: 'static'\n              };\n              var instance = $modal.open(opts);\n\n              deleteScope.closeDialog = function() {\n                instance.close();\n                deleteScope.$destroy();\n              };\n              deleteScope.deleteDialog = function() {\n                deleteWidget();\n                deleteScope.closeDialog();\n              };\n          }\n          else {\n              deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n            editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n            var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n            if (definition.editTemplateUrl) {\n                adfEditTemplatePath = definition.editTemplateUrl;\n            }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n          editScope.saveDialog = function() {\n            definition.title = editScope.definition.title;\n            angular.extend(definition.config,editScope.definition.config);\n            editScope.closeDialog();\n         };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: function ($scope) {\n\n        $scope.$on(\"adfDashboardCollapseExapand\",function(event,args){\n           $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n         });\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n            fullScreenScope.translate = dashboard.translate;\n\n            var fullscreenTemplateUrl = adfTemplatePath + 'widget-fullscreen.html';\n            if (definition.deleteTemplateUrl) {\n                fullscreenTemplateUrl = definition.deleteTemplateUrl;\n            }\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: fullscreenTemplateUrl,\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $modal.open(opts);\n          fullScreenScope.closeDialog = function () {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.10.2');\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale', [])\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n\t\t\tif (!targetColumn.widgets) {\r\n\t\t\t\ttargetColumn.widgets = [];\r\n\t\t\t}\r\n\t\t\t\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     */\n    function addNewWidgetToModel(model, widget){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n          locale: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n          $scope.translate = dashboard.translate;\n          var activeLocale = dashboard.activeLocale();\n          if (activeLocale) {\n              dashboard.setLocale(activeLocale);\n          }\n\n          $scope.$watch('locale', function(oldVal, newVal) {\n              var activeLocale = dashboard.activeLocale();\n              if (newVal && newVal !== activeLocale) {\n                  dashboard.setLocale(newVal);\n              }\n          }, true);\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.collapseAll = function(collapseExpandStatus){\n            $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n            var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n            if(model.editTemplateUrl) {\n                adfEditTemplatePath = model.editTemplateUrl;\n            }\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n            //pass translate function to the new scope so we can translate the labels inside the modal dialog\n            addScope.translate = $scope.translate;\n\n            var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n            if(model.addTemplateUrl) {\n                adfAddTemplatePath = model.addTemplateUrl;\n            }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w);\n            $rootScope.$broadcast('adfWidgetAdded', name, model, w);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n      var activeLocale = adfLocale.defaultLocale;\n      var locales = adfLocale.frameworkLocales;\n\n      function getLocales() {\n          return locales;\n      }\n\n      function getActiveLocale() {\n          return activeLocale;\n      }\n\n      function translate(label) {\n          var translation = locales[activeLocale][label];\n          return translation ? translation : label;\n      }\n\n      this.setLocale = function(locale){\n          if(locales[locale]) {\n              activeLocale = locale;\n          } else {\n              throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n          }\n\n          return this;\n      };\n      this.addLocale = function(locale, translations){\n          if(!angular.isString(locale)) {\n              throw new Error('locale must be an string');\n          }\n\n          if(!angular.isObject(translations)) {\n              throw new Error('translations must be an object');\n          }\n\n          locales[locale] = translations;\n          return this;\n      };\n\n      var customWidgetTemplatePath = null;\n\n      /**\n       * @ngdoc method\n       * @name adf.dashboardProvider#customWidgetTemplatePath\n       * @propertyOf adf.dashboardProvider\n       * @description\n       *\n       * Changes the container template for the widgets\n       *\n       * @param {string} path to the custom widget template\n       *\n       * @returns {Object} self\n       */\n      this.customWidgetTemplatePath = function(templatePath) {\n          customWidgetTemplatePath = templatePath;\n          return this;\n      };\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n          setLocale: this.setLocale,\n          locales: getLocales,\n          activeLocale: getActiveLocale,\n          translate: translate,\n          customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          //$http.get(url)\r\n          //  .success(function(response){\r\n          //    // put response to cache, with unmodified url as key\r\n          //    $templateCache.put(widget.templateUrl, response);\r\n          //    deferred.resolve(response);\r\n          //  })\r\n          //  .error(function(){\r\n          //    deferred.reject('could not load template');\r\n          //  });\r\n\r\n            //jwu: above code not working\r\n            $http.get(url).then(function(response){\r\n                // put response to cache, with unmodified url as key\r\n                $templateCache.put(widget.templateUrl, response.data);\r\n                deferred.resolve(response.data);\r\n            }, (function(){\r\n                deferred.reject('could not load template');\r\n            }));\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n\n        //passs translate function from dashboard so we can translate labels inside html templates\n        $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n         if(!$scope.widgetState){\n             $scope.widgetState ={};\n             $scope.widgetState.isCollapsed= false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n      var deleteWidget = function(){\n        var column = $scope.col;\n        if (column) {\n          var index = column.widgets.indexOf(definition);\n          if (index >= 0) {\n            column.widgets.splice(index, 1);\n          }\n        }\n        $element.remove();\n      };\n        $scope.remove = function() {\n          if($scope.options.enableConfirmDelete){\n              var deleteScope= $scope.$new();\n              deleteScope.translate = dashboard.translate;\n\n              var adfDeleteTemplatePath = adfTemplatePath + 'widget-delete.html';\n              if (definition.deleteTemplateUrl) {\n                  adfDeleteTemplatePath = definition.deleteTemplateUrl;\n              }\n              var opts = {\n                scope: deleteScope,\n                templateUrl: adfDeleteTemplatePath,\n                backdrop: 'static'\n              };\n              var instance = $modal.open(opts);\n\n              deleteScope.closeDialog = function() {\n                instance.close();\n                deleteScope.$destroy();\n              };\n              deleteScope.deleteDialog = function() {\n                deleteWidget();\n                deleteScope.closeDialog();\n              };\n          }\n          else {\n              deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n            editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n            var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n            if (definition.editTemplateUrl) {\n                adfEditTemplatePath = definition.editTemplateUrl;\n            }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n          editScope.saveDialog = function() {\n            definition.title = editScope.definition.title;\n            angular.extend(definition.config,editScope.definition.config);\n            editScope.closeDialog();\n         };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n\n      controller: function ($scope) {\n\n        $scope.$on(\"adfDashboardCollapseExapand\",function(event,args){\n           $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n         });\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n            fullScreenScope.translate = dashboard.translate;\n\n            var fullscreenTemplateUrl = adfTemplatePath + 'widget-fullscreen.html';\n            if (definition.deleteTemplateUrl) {\n                fullscreenTemplateUrl = definition.deleteTemplateUrl;\n            }\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: fullscreenTemplateUrl,\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $modal.open(opts);\n          fullScreenScope.closeDialog = function () {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode locale=locale> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog() ng-bind=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button>  <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>Apply</button> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div class=panel-body collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);})(window);"]}