{"version":3,"sources":["angular-dashboard-framework/dist/angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","$modal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","unshift","transclude","name","collapsible","editable","maximizable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","$broadcast","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","$new","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","opts","addWidget","$attr","enableConfirmDelete","enableconfirmdelete","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","$on","preLink","definition","fromJson","widgetState","isCollapsed","debug","postLink","maxLength","deleteWidget","remove","deleteScope","adfDeleteTemplatePath","deleteTemplateUrl","adfEditTemplatePath","deleteDialog","editScope","saveDialog","event","args","openFullScreen","fullScreenScope","size","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["(function(window, undefined) {'use strict';\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.10.3');\r\n\r\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n\t\t\tif (!targetColumn.widgets) {\r\n\t\t\t\ttargetColumn.widgets = [];\r\n\t\t\t}\r\n\t\t\t\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$modal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     */\r\n    function addNewWidgetToModel(model, widget){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '='\r\n      },\r\n      controller: [\"$scope\", function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n            $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n          var instance = $modal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfTemplatePath + 'dashboard-edit.html',\r\n            backdrop: 'static'\r\n          });\r\n          $scope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfTemplatePath + 'widget-add.html',\r\n            backdrop: 'static'\r\n          };\r\n          var instance = $modal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w);\r\n            $rootScope.$broadcast('adfWidgetAdded', name, model, w);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  }]);\r\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {reload: true};\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return ++cid;\r\n        }\r\n      };\r\n    };\r\n\r\n  });\r\n\r\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"$sce\", \"$http\", \"$templateCache\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n            .success(function(response){\r\n              // put response to cache, with unmodified url as key\r\n              $templateCache.put(widget.templateUrl, response);\r\n              deferred.resolve(response);\r\n            })\r\n            .error(function(){\r\n              deferred.reject('could not load template');\r\n            });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$log\", \"$modal\", \"dashboard\", \"adfTemplatePath\", function($log, $modal, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope){\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title){\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid){\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n         if(!$scope.widgetState){\r\n             $scope.widgetState ={};\r\n             $scope.widgetState.isCollapsed= false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n\t  // set max length of the field\r\n\t  $scope.maxLength = 20;\r\n\r\n      if (definition) {\r\n        // bind close function\r\n\r\n      var deleteWidget = function(){\r\n        var column = $scope.col;\r\n        if (column) {\r\n          var index = column.widgets.indexOf(definition);\r\n          if (index >= 0) {\r\n            column.widgets.splice(index, 1);\r\n          }\r\n        }\r\n        $element.remove();\r\n      }\r\n        $scope.remove = function() {\r\n          if($scope.options.enableConfirmDelete){\r\n              var deleteScope= $scope.$new();\r\n              var adfDeleteTemplatePath = adfTemplatePath + 'widget-delete.html';\r\n              if (definition.deleteTemplateUrl) {\r\n                adfEditTemplatePath = definition.deleteTemplateUrl;\r\n              }\r\n              var opts = {\r\n                scope: deleteScope,\r\n                templateUrl: adfDeleteTemplatePath,\r\n                backdrop: 'static'\r\n              };\r\n              var instance = $modal.open(opts);\r\n\r\n              deleteScope.closeDialog = function() {\r\n                instance.close();\r\n                deleteScope.$destroy();\r\n              };\r\n              deleteScope.deleteDialog = function() {\r\n                deleteWidget();\r\n                deleteScope.closeDialog();\r\n              };\r\n          }\r\n          else {\r\n              deleteWidget();\r\n          }\r\n        }\r\n\r\n        // bind reload function\r\n        $scope.reload = function(){\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\t\t  if (editScope.definition.title != undefined || editScope.definition.title != null && editScope.definition.title.length > $scope.maxLength) {\r\n\t\t\teditScope.definition.title = editScope.definition.title.substring(0, $scope.maxLength);\r\n\t\t  }\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfTemplatePath + 'widget-edit.html',\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $modal.open(opts);\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n\r\n            var widget = $scope.widget;\r\n            if (widget.edit && widget.edit.reload){\r\n              // reload content after edit dialog is closed\r\n              $scope.$broadcast('widgetConfigChanged');\r\n            }\r\n          };\r\n          editScope.saveDialog = function() {\r\n            definition.title = editScope.definition.title;\r\n            angular.extend(definition.config,editScope.definition.config);      \r\n            editScope.closeDialog();\r\n         };\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n\r\n      controller: [\"$scope\", function ($scope) {\r\n        \r\n        $scope.$on(\"adfDashboardCollapseExapand\",function(event,args){\r\n           $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n         });\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $modal.open(opts);\r\n          fullScreenScope.closeDialog = function () {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n\r\n      compile: function compile(){\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  }]);\r\n\r\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\r\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>Structure</label> <div class=\\\"radio dashboard-container\\\" ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> <img src='assets/img/dashboard/{{key}}.png' alt='{{key}}'> </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\r\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\r\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\r\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode> </adf-dashboard-row></div> </div> \");\r\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\r\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\r\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title maxlength='{{ maxLength }}' placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>Apply</button> </div> \");\r\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\r\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title | limitTo : maxLength}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\r\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div class=panel-body collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);})(window);"]}